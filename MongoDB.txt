服务端: //Terminal
    下载:mongodb 百度
    开启:mongod
         sudo service mongod start
    检验:ps ajx|gerp mongod

客户端: //Terminal
    开启:mongo
    查看当前数据库名称：db
    查看当前数据库信息：dbstats()
    查看所有数据库：show dbs
    切换数据库：use Database
    删除数据库：db.dropDatabase

GUI端：   //robomongo //Terminal
    开启：bin/robomongo
    集合创建:db.ceateCollection(name, option//限制集合大小)
    删除集合：db.集合名称.drop()  //在该定集合下
             db.集合名称.remove({匹配条件}，{justOne:<boolean>}) //第二个值为单/多行
    插入：db.集合名称.insert({name:'tars',gender:true})
    修改：db.集合名称.update({原值},{改值},{multi:<boolean>}) //第三个参数不写默认修改一行
    保存：db.集合名称.save(document)

    逻辑运算符：
      匹配等于（=）指定值的文档：$eq
      匹配大于（>）指定值的文档：$gt
      匹配大于等于（>=）指定值的文档：$gte
      匹配小于（<）指定值的文档：$lt
      匹配小于等于（<=）指定值的文档：$lte
      匹配不等于（≠）指定值的文档：$ne
      匹配数组中的任一值：$in

    查看集合：db.集合名称.file({条件文档})
    方法：
    在fild()后面写
      读取指定数量的文档：.ship(指定条数)
      跳过指定数量的文档：.lomit(指定条数)
      用于对结果进行排序：.sort({字段名称：1or-1}) //升序和降序
      统计结果集文档条数：.count({条件})
      对数据进行去重：.distinct()

   聚合：aggregate([...])    类似sum() abs()
      用于计算数据：db.集合名称.aggregate([{管道：{表达式}}])
   管道：
      将集合中的文档分组：$group
          修改输入文档的结构：$project
      输出符合条件的文档：$match
      将输入文档排序后输出：$sort
      限制聚合管道返回的文档数:$limit
      跳过指定的文档数：$ship
      将数组累心的字段拆分：$unwind
      将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值：$unwind

   表达式：
     求和：$sum
     平均值：$avg
     最小值：$min
     最大值：$max
     在结果文档中插入一个值到数组中：$push
     根据资源文档的排序获取第一个文档数据：$first
     根据资源文档的排序获取最后一个文档数据：$last

   索引：
     查询性能：.explain('executionStats')
     建立索性：1标识升序，-1标示降序
              db.集合.ensureIndex({属性:1})
     执行上面的同样的查询，并进行查询性能的分析
              db.t1.ensureIndex({name:1})
     建立唯一索引，实现唯一约束的功能。
              db.t1.ensureIndex({"name":1},{"unique":ture})
     联合索引，对多个属性建立一个索引，按照find()出现的顺序
              db.t1.ensureIndex({name:1,age:1})
     查看文档所有索引：
              db.t1.getIndexes()
     删除索引：
              db.t1.dropIndexes('索引名称')

  安全:
     root：只在admin数据库中可用，超级账号，超级权限
     Read：允许用户读取指定的数据库
     ReadWrite：允许用户读写指定的数据库

     创建超级管理用户：
          use admin
          db.createUser({user:'admin',pwd:'123',roles:[{role:'root',db:'admin'}]})

  备份：
  mongodump -h dbhost -d dbname -o dbdirectory
  -h：
  MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017
  -d：
  需要备份的数据库实例，例如：test
  -o：
  备份的数据存放位置，例如：c:\data\dump，当然该目录需要提前建立，在备份完成后，
  系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。

  恢复：
  mongorestore -h <hostname><:port> -d dbname <path>
  --host <:port>, -h <:port>：
  MongoDB所在服务器地址，默认为： localhost:27017
  --db , -d ：
  需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2
  --drop：
  恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！
  <path>：
  mongorestore 最后的一个参数，设置备份数据所在位置，例如：c:\data\dump\test。
  你不能同时指定 <path> 和 --dir 选项，--dir也可以设置备份目录。
  --dir：
  指定备份的目录
  你不能同时指定 <path> 和 --dir 选项。
